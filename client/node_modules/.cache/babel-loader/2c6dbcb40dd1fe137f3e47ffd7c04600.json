{"ast":null,"code":"import _classCallCheck from \"/home/ubuntu/SLAES/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ubuntu/SLAES/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ubuntu/SLAES/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ubuntu/SLAES/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ubuntu/SLAES/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/ubuntu/SLAES/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/ubuntu/SLAES/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createBrowserHistory } from \"history\";\nimport { Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport AuthLayout from \"./layouts/Auth/Auth.jsx\";\nimport AdminLayout from \"./layouts/Admin/Admin.jsx\"; // import \"bootstrap/dist/css/bootstrap.css\";\n\nimport \"./assets/scss/paper-dashboard.scss\";\nimport \"./assets/demo/demo.css\";\nvar hist = createBrowserHistory();\n/*The <Route> component is the main part of React Router. Anywhere that you want to only render content based on the location’s pathname, you should use a <Route> element. */\n\n/* The Route component expects a path prop, which is a string that describes the pathname that the route matches */\n\n/* The <Switch> will iterate over routes and only render the first one that matches the current pathname */\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n    _this.state = {\n      loggedIn: false,\n      user: null\n    };\n    _this._logout = _this._logout.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this._login = _this._login.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      axios.get('/auth/user').then(function (response) {\n        console.log(response.data);\n\n        if (!!response.data.user) {\n          console.log('THERE IS A USER');\n\n          _this2.setState({\n            loggedIn: true,\n            user: response.data.user\n          });\n        } else {\n          _this2.setState({\n            loggedIn: false,\n            user: null\n          });\n        }\n      });\n    }\n  }, {\n    key: \"_logout\",\n    value: function _logout(event) {\n      var _this3 = this;\n\n      event.preventDefault();\n      console.log('logging out');\n      axios.post('/auth/logout').then(function (response) {\n        console.log(response.data);\n\n        if (response.status === 200) {\n          _this3.setState({\n            loggedIn: false,\n            user: null\n          });\n        }\n      });\n    }\n  }, {\n    key: \"_login\",\n    value: function _login(username, password) {\n      var _this4 = this;\n\n      axios.post('/auth/login', {\n        username: username,\n        password: password\n      }).then(function (response) {\n        console.log(response);\n\n        if (response.status === 200) {\n          // update the state\n          _this4.setState({\n            loggedIn: true,\n            user: response.data.user\n          });\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(Router, {\n        history: hist,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(Route, {\n        path: \"/auth\",\n        render: function render(props) {\n          return React.createElement(AuthLayout, Object.assign({}, props, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/admin\",\n        render: function render(props) {\n          return React.createElement(AdminLayout, Object.assign({}, props, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/admin\",\n        component: AdminLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), React.createElement(Redirect, {\n        from: \"/\",\n        to: \"/admin/dashboard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/ubuntu/SLAES/client/src/App.js"],"names":["React","Component","ReactDOM","createBrowserHistory","Router","Route","Switch","Redirect","serviceWorker","AuthLayout","AdminLayout","hist","App","state","loggedIn","user","_logout","bind","_login","axios","get","then","response","console","log","data","setState","event","preventDefault","post","status","username","password","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { createBrowserHistory } from \"history\";\r\nimport { Router, Route, Switch, Redirect } from \"react-router-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport AuthLayout from \"./layouts/Auth/Auth.jsx\";\r\nimport AdminLayout from \"./layouts/Admin/Admin.jsx\";\r\n\r\n// import \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./assets/scss/paper-dashboard.scss\";\r\nimport \"./assets/demo/demo.css\";\r\n\r\nconst hist = createBrowserHistory();\r\n\r\n/*The <Route> component is the main part of React Router. Anywhere that you want to only render content based on the location’s pathname, you should use a <Route> element. */\r\n\r\n/* The Route component expects a path prop, which is a string that describes the pathname that the route matches */\r\n\r\n/* The <Switch> will iterate over routes and only render the first one that matches the current pathname */\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n  \t\tsuper()\r\n  \t\tthis.state = {\r\n  \t\t\tloggedIn: false,\r\n  \t\t\tuser: null\r\n  \t\t}\r\n  \t\tthis._logout = this._logout.bind(this)\r\n  \t\tthis._login = this._login.bind(this)\r\n  \t}\r\n  \tcomponentDidMount() {\r\n  \t\taxios.get('/auth/user').then(response => {\r\n  \t\t\tconsole.log(response.data)\r\n  \t\t\tif (!!response.data.user) {\r\n  \t\t\t\tconsole.log('THERE IS A USER')\r\n  \t\t\t\tthis.setState({\r\n  \t\t\t\t\tloggedIn: true,\r\n  \t\t\t\t\tuser: response.data.user\r\n  \t\t\t\t})\r\n  \t\t\t} else {\r\n  \t\t\t\tthis.setState({\r\n  \t\t\t\t\tloggedIn: false,\r\n  \t\t\t\t\tuser: null\r\n  \t\t\t\t})\r\n  \t\t\t}\r\n  \t\t})\r\n  \t}\r\n\r\n  \t_logout(event) {\r\n  \t\tevent.preventDefault()\r\n  \t\tconsole.log('logging out')\r\n  \t\taxios.post('/auth/logout').then(response => {\r\n  \t\t\tconsole.log(response.data)\r\n  \t\t\tif (response.status === 200) {\r\n  \t\t\t\tthis.setState({\r\n  \t\t\t\t\tloggedIn: false,\r\n  \t\t\t\t\tuser: null\r\n  \t\t\t\t})\r\n  \t\t\t}\r\n  \t\t})\r\n  \t}\r\n\r\n  \t_login(username, password) {\r\n  \t\taxios\r\n  \t\t\t.post('/auth/login', {\r\n  \t\t\t\tusername,\r\n  \t\t\t\tpassword\r\n  \t\t\t})\r\n  \t\t\t.then(response => {\r\n  \t\t\t\tconsole.log(response)\r\n  \t\t\t\tif (response.status === 200) {\r\n  \t\t\t\t\t// update the state\r\n  \t\t\t\t\tthis.setState({\r\n  \t\t\t\t\t\tloggedIn: true,\r\n  \t\t\t\t\t\tuser: response.data.user\r\n  \t\t\t\t\t})\r\n  \t\t\t\t}\r\n  \t\t\t})\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n      <Router history={hist}>\r\n      <Route path=\"/auth\" render={props => <AuthLayout {...props} />} />\r\n      <Route path=\"/admin\" render={props => <AdminLayout {...props} />} />\r\n      <Route path=\"/admin\"  component = {AdminLayout}/>\r\n      <Redirect from=\"/\" to=\"/admin/dashboard\" />\r\n      </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}